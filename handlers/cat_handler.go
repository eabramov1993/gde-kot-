package handlers

import (
	"fmt"
	"gde-kot/config"
	"gde-kot/models"
	"os"
	"path/filepath"
	"strconv"
	"time"

	"github.com/gofiber/fiber/v2"
)

func GetCats(c *fiber.Ctx) error {
	var cats []models.Cat
	result := config.DB.Where("approved = ?", true).Find(&cats)
	if result.Error != nil {
		return c.Status(500).JSON(fiber.Map{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ—Ç–æ–≤"})
	}

	now := time.Now()

	for i := range cats {
		cat := &cats[i]

		if cat.Status == "fed" && cat.FedAt != nil {
			if now.Sub(*cat.FedAt) > 6*time.Hour {
				cat.Status = "hungry"
				cat.FedAt = nil
				config.DB.Save(cat)
			}
		}

		if (cat.Status == "taken" || cat.Status == "moving") && cat.TakenAt != nil && !cat.Confirmed {
			if now.Sub(*cat.TakenAt) > 3*time.Hour {
				cat.Status = "hungry"
				cat.TakenAt = nil
				config.DB.Save(cat)
			}
		}
	}

	return c.JSON(cats)
}

func CreateCat(c *fiber.Ctx) error {
	description := c.FormValue("description")
	status := c.FormValue("status")
	lat := c.FormValue("location_lat")
	lng := c.FormValue("location_lng")

	if status == "" || lat == "" || lng == "" {
		return c.Status(400).JSON(fiber.Map{"error": "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è"})
	}

	locationLat, err := strconv.ParseFloat(lat, 64)
	if err != nil {
		return c.Status(400).JSON(fiber.Map{"error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —à–∏—Ä–æ—Ç–∞"})
	}
	locationLng, err := strconv.ParseFloat(lng, 64)
	if err != nil {
		return c.Status(400).JSON(fiber.Map{"error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–æ–ª–≥–æ—Ç–∞"})
	}

	var photoURL string
	file, err := c.FormFile("photo")
	if err == nil && file != nil {
		uploadDir := "./uploads"
		os.MkdirAll(uploadDir, os.ModePerm)
		filename := fmt.Sprintf("%d_%s", time.Now().UnixNano(), file.Filename)
		filePath := filepath.Join(uploadDir, filename)

		if err := c.SaveFile(file, filePath); err != nil {
			return c.Status(500).JSON(fiber.Map{"error": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–æ—Ç–æ"})
		}
		photoURL = "/uploads/" + filename
	}

	cat := models.Cat{
		Description: description,
		Status:      status,
		LocationLat: locationLat,
		LocationLng: locationLng,
		PhotoURL:    photoURL,
		Approved:    false, // üü° –ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
	}

	if cat.Status == "fed" {
		now := time.Now()
		cat.FedAt = &now
	}

	result := config.DB.Create(&cat)
	if result.Error != nil {
		return c.Status(500).JSON(fiber.Map{"error": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ—Ç–∞"})
	}

	return c.JSON(cat)
}

func UpdateCatStatus(c *fiber.Ctx) error {
	id := c.Params("id")

	var body struct {
		Status string `json:"status"`
	}

	if err := c.BodyParser(&body); err != nil {
		return c.Status(400).JSON(fiber.Map{"error": "–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON"})
	}

	var cat models.Cat
	result := config.DB.First(&cat, id)
	if result.Error != nil {
		return c.Status(404).JSON(fiber.Map{"error": "–ö–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"})
	}

	cat.Status = body.Status

	if body.Status == "fed" {
		now := time.Now()
		cat.FedAt = &now
	} else {
		cat.FedAt = nil
	}

	if body.Status == "moving" {
		now := time.Now()
		cat.TakenAt = &now
	} else if body.Status != "taken" {
		cat.TakenAt = nil
	}

	config.DB.Save(&cat)

	return c.JSON(cat)
}

func ConfirmCat(c *fiber.Ctx) error {
	id := c.Params("id")

	// 1) –°–Ω–∞—á–∞–ª–∞ —á–∏—Ç–∞–µ–º –∫–æ—Ç–∞ –∏–∑ –±–∞–∑—ã
	var cat models.Cat
	if err := config.DB.First(&cat, id).Error; err != nil {
		return c.Status(404).JSON(fiber.Map{"error": "–ö–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"})
	}

	// 2) –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ–ø—É—Å—Ç–∏–º–æ –ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
	if cat.Status != "moving" || cat.Confirmed {
		return c.Status(400).JSON(fiber.Map{"error": "–ù–µ–ª—å–∑—è –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —ç—Ç–æ–≥–æ –∫–æ—Ç–∞"})
	}

	// 3) –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ñ–æ—Ç–æ‚Äë–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ
	file, err := c.FormFile("photo")
	if err != nil {
		return c.Status(400).JSON(fiber.Map{"error": "–§–æ—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ"})
	}

	// 4) –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
	uploadDir := "./uploads"
	os.MkdirAll(uploadDir, os.ModePerm)

	filename := fmt.Sprintf("confirm_%d_%s", time.Now().UnixNano(), file.Filename)
	filePath := filepath.Join(uploadDir, filename)

	if err := c.SaveFile(file, filePath); err != nil {
		return c.Status(500).JSON(fiber.Map{"error": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–æ—Ç–æ"})
	}

	// 5) –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å: –æ—Å—Ç–∞—ë—Ç—Å—è status = moving, confirmed = false
	cat.ConfirmPhotoURL = "/uploads/" + filename
	cat.Confirmed = false

	if err := config.DB.Save(&cat).Error; err != nil {
		return c.Status(500).JSON(fiber.Map{"error": "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ—Ç–∞"})
	}

	// 6) –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–≥–æ –∫–æ—Ç–∞
	return c.JSON(cat)
}


func ModerateCat(c *fiber.Ctx) error {
	id := c.Query("id")
	action := c.Query("action")

	var cat models.Cat
	if err := config.DB.First(&cat, id).Error; err != nil {
		return c.Status(404).SendString("–ö–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
	}

	switch action {
	case "approve":
		cat.Approved = true

	case "confirm":
		if cat.ConfirmPhotoURL == "" {
			return c.Status(400).SendString("–ù–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–≥–æ —Ñ–æ—Ç–æ")
		}
		cat.Confirmed = true
		cat.Status = "taken"

	case "delete": // ‚Üê üî• –Ω–æ–≤–∞—è –≤–µ—Ç–∫–∞
		if err := config.DB.Delete(&cat).Error; err != nil {
			return c.Status(500).SendString("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è")
		}
		return c.SendString("OK")

	default:
		return c.Status(400).SendString("–ù–µ–≤–µ—Ä–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")
	}

	if err := config.DB.Save(&cat).Error; err != nil {
		return c.Status(500).SendString("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
	}

	return c.SendString("OK")
}


func GetAllCats(c *fiber.Ctx) error {
	var cats []models.Cat
	result := config.DB.Find(&cats)
	if result.Error != nil {
		return c.Status(500).JSON(fiber.Map{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å–µ—Ö –∫–æ—Ç–æ–≤"})
	}
	return c.JSON(cats)
}
