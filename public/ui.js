const catMarkers = {};
const statusLabels = {
  hungry: "–ü–æ–∫–æ—Ä–º–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ ü•∫",
  fed: "–Ø —Å—ã—Ç –∏ —Å—á–∞—Å—Ç–ª–∏–≤ üò∏",
  taken: "–Ø –¥–æ–º–∞ üè†",
  in_treatment: "–Ø –ª–µ—á—É—Å—å üë®‚Äç‚öïÔ∏è",
  injured: "–Ø –ø–æ—Ä–∞–Ω–µ–Ω üòø",
  default: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å",
  moving: "–ü–µ—Ä–µ–µ–∑–∂–∞—é üß≥",
};

const feedMessages = [
  "üò∫ –°–ø–∞—Å–∏–±–æ! –ö–æ—Ç –Ω–∞–∫–æ—Ä–º–ª–µ–Ω.",
  "üêü –¢—ã —Å–ø–∞—Å –∫–æ—Ç–∞ –æ—Ç –≥–æ–ª–æ–¥–∞!",
  "üéâ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞, –≥–µ—Ä–æ–π!",
  "ü´∂ –ö–æ—Ç —Ç–µ–±–µ –±–ª–∞–≥–æ–¥–∞—Ä–µ–Ω.",
  "üçñ –ú–∏—Å—Å–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!",
  "üò∏ –í–∫—É—Å–Ω—è—Ç–∏–Ω–∞! –°–ø–∞—Å–∏–±–æ!",
];

function addCatMarker(cat) {
  const statusColors = {
    hungry: "#e74c3c",
    fed: "#f39c12",
    moving: "#f1c40f",
    taken: "#2ecc71",
    in_treatment: "#3498db",
    injured: "#9b59b6",
    default: "#95a5a6",
  };

  const color = statusColors[cat.status] || statusColors.default;

  const icon = L.divIcon({
    className: "custom-status-icon",
    html: `<div style="
      width: 20px;
      height: 20px;
      background-color: ${color};
      border-radius: 50%;
      border: 2px solid white;
      box-shadow: 0 0 4px rgba(0,0,0,0.3);
    "></div>`,
    iconSize: [20, 20],
    iconAnchor: [10, 10],
  });

  if (catMarkers[cat.id]) {
    map.removeLayer(catMarkers[cat.id]);
  }

  const marker = L.marker([cat.location_lat, cat.location_lng], { icon })
    .addTo(map)
    .on("click", () => openCatPanel(cat));

  catMarkers[cat.id] = marker;
}

function openCatPanel(cat) {
  const panel = document.getElementById("cat-panel");
  const content = document.getElementById("cat-panel-content");

  content.innerHTML = `
      <div class="cat-card">
        ${
          cat.photo_url
            ? `<img class="cat-photo" src="${cat.photo_url}" alt="–§–æ—Ç–æ –∫–æ—Ç–∞" />`
            : ""
        }
  
        <div class="cat-details">
          <div class="cat-field">
            <div class="cat-label">–û–ø–∏—Å–∞–Ω–∏–µ</div>
            <div class="cat-value">${cat.description || "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"}</div>
          </div>
  
          <div class="cat-field">
            <div class="cat-label">–°—Ç–∞—Ç—É—Å</div>
            <div class="cat-value">${
              statusLabels[cat.status] || statusLabels.default
            }</div>
          </div>
        </div>
      </div>
    `;

  // === –ù–û–í–û–ï ===
  if (cat.status === "moving" && !cat.confirmed) {
    if (!cat.confirm_photo_url) {
      /* ‚ñ≤  —Ñ–æ—Ç–æ –µ—â—ë –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ‚Üí –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É */

      const wrapper = document.createElement("div");
      wrapper.style.display = "flex";
      wrapper.style.flexDirection = "column";
      wrapper.style.alignItems = "center";
      wrapper.style.gap = "10px";
      wrapper.style.marginTop = "14px";

      const uploadBtn = document.createElement("label");
      uploadBtn.textContent = "üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ";
      uploadBtn.setAttribute("for", "confirm-photo");
      uploadBtn.className = "feed-btn";
      uploadBtn.style.cursor = "pointer";
      uploadBtn.style.textAlign = "center";

      const fileInput = document.createElement("input");
      fileInput.type = "file";
      fileInput.accept = "image/*";
      fileInput.id = "confirm-photo";
      fileInput.style.display = "none";

      fileInput.addEventListener("change", async () => {
        const file = fileInput.files[0];
        if (!file) return;

        const formData = new FormData();
        formData.append("photo", file);

        const res = await fetch(`/cats/${cat.id}/confirm`, {
          method: "POST",
          body: formData,
        });

        if (!res.ok) {
          alert("–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: " + (await res.text()));
          return;
        }

        const updated = await res.json();
        showToast("‚úÖ –§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –∂–¥—ë–º –º–æ–¥–µ—Ä–∞—Ü–∏–∏!");
        openCatPanel(updated); // –ø–µ—Ä–µ—Ä–∏—Å—É–µ–º –ø–∞–Ω–µ–ª—å
        addCatMarker(updated); // —Ü–≤–µ—Ç –º–∞—Ä–∫–µ—Ä–∞ —É–∂–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è
      });

      wrapper.appendChild(fileInput);
      wrapper.appendChild(uploadBtn);
      content.appendChild(wrapper);
    } else {
      /* ‚ñ≤  —Ñ–æ—Ç–æ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –µ—â—ë –Ω–µ –ø—Ä–æ—à–ª–æ */

      const note = document.createElement("div");
      note.className = "cat-note";
      note.innerHTML =
        "<div class='cat-value'>‚è≥ –§–æ—Ç–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏. –°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–±–æ—Ç—É!</div>";
      content.appendChild(note);
    }
  }

  if (cat.status === "hungry") {
    const btn = document.createElement("button");
    btn.textContent = "–ü–æ–∫–æ—Ä–º–ª—é";
    btn.className = "feed-btn";
    btn.onclick = async () => {
      const updated = await updateCatStatus(cat.id, "fed");
      const randomMsg =
        feedMessages[Math.floor(Math.random() * feedMessages.length)];
      showToast(randomMsg);
      openCatPanel(updated);
      addCatMarker(updated); // üîß –î–û–ë–ê–í–ò–õ
    };
    content.appendChild(btn);
  }

  if ((cat.status === "hungry" || cat.status === "fed") && !cat.confirmed) {
    const btnTake = document.createElement("button");
    btnTake.textContent = "–ó–∞–±–µ—Ä—É –¥–æ–º–æ–π";
    btnTake.className = "feed-btn";
    btnTake.style.backgroundColor = "#ff9900";
    btnTake.onclick = async () => {
      const updated = await updateCatStatus(cat.id, "moving");
      showToast("üß≥ –ö–æ—Ç –≥–æ—Ç–æ–≤–∏—Ç—Å—è –∫ –ø–µ—Ä–µ–µ–∑–¥—É!");
      openCatPanel(updated);
      addCatMarker(updated); // üîß —É–∂–µ –±—ã–ª–æ ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º
    };

    content.appendChild(btnTake);
  }

  overlay.classList.remove("hidden");
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–∞–Ω–µ–ª–∏
const overlay = document.getElementById("cat-overlay");
const panel = document.getElementById("cat-panel");

overlay.addEventListener("click", (e) => {
  if (!panel.contains(e.target)) {
    overlay.classList.add("hidden");
  }
});
document.getElementById("close-panel").addEventListener("click", () => {
  overlay.classList.add("hidden");
});

// üì¶ –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –∫–æ—Ç–æ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
async function loadCats() {
  const res = await fetch("/cats");
  const cats = await res.json();
  cats.forEach(addCatMarker);
}
loadCats();
